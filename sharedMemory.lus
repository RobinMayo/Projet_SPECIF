(*
BLOTTIERE--MAYO Robin 3200248
REYNIER Florian 3506673
*)


(* ********** I. PROCESSOR ********** *)

(* Ask for the word in address ad : *)
(*
node CPU_RD(ad : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, nil);
tel
*)

(* Ask to write val in address ad : *)
(*
node CPU_WR(ad, val : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, val)
tel
*)

(* ********** II. MEMORY ********** *)

(* Ask to read the word in address ad : *)
node READ(ad : bool^2) returns ();

(* Ask to write val in address ad : *)
node WRITE(ad, val : bool^2) returns ();


(* ********** III. BUS ********** *)

(* bool^3 = [AD, DT, CTRL] *)
node BUS(b_in_L1_1, b_in_L1_2, b_in_L1_3, b_in_mem : bool^3; arb_gnt : bool^2)
    returns(b_out : bool^3);
var valid : bool;
let
    b_out =
    	if arb_gnt = [0, 0]
    		then b_in_L1_1
    		else if arb_gnt = [0, 1]
    			then b_in_L1_2
    			else if arb_gnt = [1, 0]
    				then b_in_L1_3
    				else b_in_mem; 
tel


(* ********** IV. BUS REFEREE ********** *)

(* If several cache want to access memory, the referee choose the one who has
priority. *)
node REFEREE(L1_1_req, L1_2_req, L1_3_req, b_in_mem : bool; arb_gnt : int)
    returns(arb_gnt : bool^2);
var waiting : bool;
let
    waiting = 0 ->
        (L1_1_req and L1_2_req) or
        (L1_1_req and L1_3_req) or
        (L1_2_req and L1_3_req);
    arb_gnt = 0 ->
        if waiting and not b_in_mem;
            then if (pre arb_gnt) = 3
                then 1
                else if (pre arb_gnt) = 1
                    then 2
                    else 3
            else if b_in_mem
            	then 4
            	else 0;
tel


(* ********** V. Cache L1 ********** *)

(* sens 0 = read, sens 1 = write *)
node CACHE_L1(ad, val, sens : bool) returns(ret : bool^3);
var cache_ad, cache_val : bool;
let
	(ad, val_to_mem,got_it) = if sens = 0 and ad = cache_ad then [cache_val,0,1] 
		else if sens = 0 then [ad,0,0]
		else [ad,val,0];
	
	cache_ad = if sens = 1 then ad else pre cache_ad;
	cache_val =if sens = 1 then val else pre cache_val;
tel


(* ********** VI. SYSTEM ********** *)

node SYSTEM(proc1, proc2, proc3, sens : bool; ad, val : bool)
	returns(b1, b2, b3 : bool);
var L1_1, L1_2, L1_3, mem : bool^3; temp1,temp2,temp3 : bool; 
let
    L1_1 = if proc1 then CACHE_L1(s, ad, val) else ;
    L1_2 = if proc2 then CACHE_L1(s, ad, val) else ;
    L1_3 = if proc3 then CACHE_L1(s, ad, val) else ;
    
    temp1 = if L1_1[2] then L1_1[0] else;
    temp2 = if L1_2[2] then L1_2[0] else;
    temp3 = if L1_3[2] then L1_3[0] else;
    
tel
