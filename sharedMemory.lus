(*
BLOTTIERE--MAYO Robin 3200248
REYNIER Florian 3506673
*)


(* ********** I. MEMORY ********** *)

(* La variable ret est un tableau de booleens de taille 3 avec :
	- ret[O] l'adresse,
	- ret[1] la valeur,
	- ret[2] le sens (0 = read, 1 = write).
	*)
node MEM(have_req : bool; req : bool^3) returns(ret: bool^3);
var memory : bool^2;
let
	memory[0] = if have_req and req[0] = 0 and req[2] = 1 then req[1] else 0->pre memory[0];
	memory[1] = if have_req and req[0] = 1 and req[2] = 1 then req[1] else 0->pre memory[1];
	
	ret[0] = req[0];
	ret[1] = if req[0] = 0 then memory[0] else memory[1];
	ret[2] = req[2];
tel;


(* ********** II. BUS ********** *)

(* bool^3 = [AD, DT, CTRL] *)
node BUS(b_in_L1_1, b_in_L1_2, b_in_L1_3, b_in_mem : bool^3; arb_gnt : bool^2)
    returns(b_out : bool^3);
let
    b_out =
    	if arb_gnt[0] = 0 and arb_gnt[1] = 0
    		then b_in_L1_1
    		else if arb_gnt[0] = 0 and arb_gnt[1] = 1
    			then b_in_L1_2
    			else if arb_gnt[0] = 1 and arb_gnt[1] = 0
    				then b_in_L1_3
    				else b_in_mem; 
tel


(* ********** III. BUS REFEREE ********** *)

(* Si plusieurs caches veulent acceder a la memoire, l'arbitre choisit celui qui a la prioritee. *)
node REFEREE(L1_1, L1_2, L1_3, b_in_mem : bool) returns(arb_gnt : bool^2);
var last_cache, last_cache2 : bool^2;
let
	(* <1> etat initial arbitraire, 1 a priorité sur 2 et 2 sur 3*)
	(* <2> si on a aucun signal, renvoie 00 valeur qui ne sera pas utilisée, si la memoire veut le bus, on lui donne en 
	priorité absolue*)
	(*<3 a 8> Les 6 possibilites d'etats classiques d'etats elus precedement le troisieme a priorité sur l'avant dernier elu
	qui à priorité sur le dernier elu*)
	(*<9 a 12> cas particuliers des premiere et deuxieme election de cache, l'etat initial ou le dernier et l'avant dernier
		sont nuls([1,1]) et les trois possibilités de deuxieme election ou l'avant dernier est nul et le dernier est l'un des 
		3 caches*)
    arb_gnt = (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0]) -> (*1*)
    	if not L1_1 and not L1_2 and not L1_3 and not b_in_mem then [0,0] else if b_in_mem then [1,1](*2*) 
		else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 1 and pre last_cache2[1] = 0 (*3*) 
			then (if L1_2 then [0,1] else if L1_3 then [1,0] else [0,0]) 
		else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 1 (*4*)
			then (if L1_3 then [1,0] else if L1_2 then [0,1] else [0,0])
		else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 0 and pre last_cache2[1] = 0 (*5*)
			then (if L1_3 then [1,0] else if L1_1 then [0,0] else [0,1])
		else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 0 (*6*)
			then (if L1_1 then [0,0] else if L1_3 then [1,0] else [0,1])
		else if pre last_cache[0] = 1 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 0 (*7*)
			then (if L1_2 then [0,1] else if L1_1 then [0,0] else [1,0])
		else if pre last_cache[0] = 1 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 1 (*8*)
			then (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0])
		else if pre last_cache[0] = 1 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 (*9*)
			then (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0])
		else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 (*10*)
			then (if L1_2 then [0,1] else if L1_3 then [1,0] else [0,0])
		else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 (*11*)
			then (if L1_1 then [0,0] else if L1_3 then [1,0] else [0,1])
		else (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0]);(*12*)

	(*last_cache2 avant dernier cache elu, si aucun cache ou seulement 1 a été élu vaut [1,1]*)
	last_cache2 = if (L1_1 or L1_2 or L1_3) and not b_in_mem then [1,1]->pre last_cache else [1,1]->pre last_cache2;
	(*last_cache1 dernier cache elu, si aucun cache n'a été élu vaut [1,1]*)
	last_cache = if (L1_1 or L1_2 or L1_3) and not b_in_mem then arb_gnt else [1,1]->pre last_cache;

(* note : ne pas confondre la valeur [1,1] des derniers caches qui correspond à aucun cache, et la valeur [1,1] de arb_gnt
qui corresponds a l'election de la memoire les trois autres possibilites du couple de booleens designe dans les deux cas
les 3 caches *)

tel


(* ********** IV. Cache L1 ********** *)

(* sens 0 = read, sens 1 = write *)
node CACHE_L1(new_req, ad, val, sens, cache_maj, ad_maj, val_maj: bool) returns(ret : bool^4);
var cache_ad, cache_val : bool;
let

	cache_ad =
		if sens = 1 and new_req
			then ad
			else if cache_maj
				then ad_maj
				else 0->pre cache_ad;
	cache_val =
		if sens = 1 and new_req
			then val
			else if cache_maj
				then val_maj
				else 0->pre cache_val;
	ret =
		if new_req and sens = 0 and ad = cache_ad
			then [ad,cache_val,sens,1] 
			else if  new_req
				then [ad,val,sens,0]
				else [0->pre ad, 0->pre val,0->pre sens, 0];
tel


(* ********** V. SYSTEM ********** *)

(* Les variables proc sont des tableaux de booleens de taille 4 avec :
	- proc[O] indique si une requete est faite,
	- proc[1] indique l'adresse ou chercher la valeur,
	- proc[2] indique la valeur a ecrire (donc uniquement pour les write),
	- proc[3] indique l'action a effectuer (0 = read, 1 = write).
	*)
node SYSTEM(proc1, proc2, proc3: bool^4;)
	returns(
		b1, b2, b3 : bool;
		L1_1, L1_2, L1_3, new_req1, new_req2, new_req3 : bool^4;
		mem , b_out, read1, read2, read3 : bool^3;
		elected1, elected2, elected3, have_requestmem, have_request1, have_request2,
		have_request3, bus_req1, bus_req2, bus_req3, arbitrage : bool;
		arb_gnt : bool^2;
		);
let

	(* have_request: vrai si le cache ou la memoire a une requete non satisfaite *)
	have_requestmem = if (0->pre elected1) or (0->pre elected2) or (0->pre elected3) then 1 else 0;
	have_request1 = if proc1[0] or (0->pre have_request1 and not (0->pre elected1)) then 1 else 0;
	have_request2 = if proc2[0] or (0->pre have_request2 and not (0->pre elected2)) then 1 else 0;
	have_request3 = if proc3[0] or (0->pre have_request3 and not (0->pre elected3)) then 1 else 0;

	(* new req: vrai si le system a pris en compte une nouvelle requete *)
	new_req1 = if have_request1 and not (0->pre have_request1) or proc1[0] and have_requestmem then [1, proc1[1], proc1[2], proc1[3]] else [0,0,0,0];
	new_req2 = if have_request2 and not (0->pre have_request2) or proc2[0] and have_requestmem then [1, proc2[1], proc2[2], proc2[3]] else [0,0,0,0];
	new_req3 = if have_request3 and not (0->pre have_request3) or proc3[0] and have_requestmem then [1, proc3[1], proc3[2], proc3[3]] else [0,0,0,0];

	(* L1_1: [adresse, valeur, sens, flag à vrai si valeur en cache] retour du cache renvoye sur le bus *)
    L1_1 = CACHE_L1(new_req1[0], new_req1[1], new_req1[2], new_req1[3],
    	0->pre read1[0], 0->pre read1[1], 0->pre read1[2]);
    L1_2 = CACHE_L1(new_req2[0], new_req2[1], new_req2[2], new_req2[3],
    	0->pre read2[0], 0->pre read2[1], 0->pre read2[2]);
    L1_3 = CACHE_L1(new_req3[0],new_req3[1],new_req3[2],new_req3[3],
    	0->pre read3[0], 0->pre read3[1], 0->pre read3[2]);
    
	(* bus_req: vaut vrai si le cache a besoin du bus (valeur non trouvée en cache) *)
	bus_req1 = if have_request1 and L1_1[3] = 0 then 1 else 0;
	bus_req2 = if have_request2 and L1_2[3] = 0 then 1 else 0;
	bus_req3 = if have_request3 and L1_3[3] = 0 then 1 else 0;

	(* arb_gnt: resultat de l'arbitrage *)
	arb_gnt = REFEREE(bus_req1, bus_req2, bus_req3, have_requestmem);

	(* arbitrage: vrai si l'arbitre a au moins une entrée vraie (quelqu'un doit etre elu) *)
	arbitrage = if bus_req1 or bus_req2 or bus_req3 or have_requestmem then 1 else 0;
	
	(* elected: vrai si le cache est élu
   elected1 = [0,0],
   elected2 = [0,1],
   elected3 = [1,0],
   mem = [1,1].
   *)
	elected1 = if arbitrage and arb_gnt[0] = 0 and arb_gnt[1] = 0 then 1 else 0;
	elected2 = if arbitrage and arb_gnt[0] = 0 and arb_gnt[1] = 1 then 1 else 0;
	elected3 = if arbitrage and arb_gnt[0] = 1 and arb_gnt[1] = 0 then 1 else 0;
	
	(*mem: retour de la memoire*)
	mem = MEM(if arb_gnt[0] = 1 and arb_gnt[1] = 1 then 1 else 0,[0,0,0]->pre b_out);
	b_out = BUS(L1_1[0..2], L1_2[0..2], L1_3[0..2], mem, arb_gnt);
	
	(*b: retour du système, valeur souhaitée pour la lecture ou valeur ecrite pour l'écriture*)
	b1 = if L1_1[3] = 1
		then L1_1[1]
		else if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected1
			then b_out[1]
			else 0;
	b2 = if L1_2[3] = 1
		then L1_2[1]
		else if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected2
			then b_out[1]
			else 0;
	b3 = if L1_3[3] = 1
		then L1_3[1]
		else if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected3
			then b_out[1]
			else 0;

	(*read: [si une valeur est lue, adresse de la valeur lue, valeur lue]
	sert pour la mise à jour du cache*)
    read1 = [0,0,0]
    	-> if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected1 and b_out[2] = 0
    		then [1,b_out[0], b_out[1]]
    		else [0,0,0];
    read2 = [0,0,0]
    	-> if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected2 and b_out[2] = 0
    		then [1,b_out[0], b_out[1]]
    		else [0,0,0];
    read3 = [0,0,0]
    	-> if arb_gnt[0] = 1 and arb_gnt[1] = 1 and 0->pre elected3 and b_out[2] = 0
    		then [1,b_out[0], b_out[1]]
    		else [0,0,0];
tel


