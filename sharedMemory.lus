(*
BLOTTIERE--MAYO Robin 3200248
REYNIER Florian 3506673
*)


(* ********** I. PROCESSOR ********** *)

(* Ask for the word in address ad : *)
(*
node CPU_RD(ad : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, nil);
tel
*)

(* Ask to write val in address ad : *)
(*
node CPU_WR(ad, val : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, val)
tel
*)

(* ********** II. MEMORY ********** *)

node mem (req : bool^3) returns(ret: bool^3);
	var memory : bool^2;
	let
		memory[0] = if req[1] == 0 and req[3] == 1 then req[2] else pre memory;
		memory[1] = if req[1] == 1 and req[3] == 1 then req[2] else pre memory;
		
		ret[0]=1;
		ret[1]=0;
		ret[2] = if req[3] == 0 then(if req[1] == 0 then memory[0] else memory[1]) else 0;
		ret[3]=0;
		
	tel;


(* ********** III. BUS ********** *)

(* bool^3 = [AD, DT, CTRL] *)
node BUS(b_in_L1_1, b_in_L1_2, b_in_L1_3, b_in_mem : bool^3; arb_gnt : bool^2)
    returns(b_out : bool^3);
var valid : bool;
let
    b_out =
    	if arb_gnt = [0, 0]
    		then b_in_L1_1
    		else if arb_gnt = [0, 1]
    			then b_in_L1_2
    			else if arb_gnt = [1, 0]
    				then b_in_L1_3
    				else b_in_mem; 
tel


(* ********** IV. BUS REFEREE ********** *)

(* If several cache want to access memory, the referee choose the one who has
priority. *)
node REFEREE(L1_1_req, L1_2_req, L1_3_req, b_in_mem : bool; arb_gnt : int)
    returns(arb_gnt : bool^2);
var waiting : bool;
let
    waiting = 0 ->
        (L1_1_req and L1_2_req) or
        (L1_1_req and L1_3_req) or
        (L1_2_req and L1_3_req);
    arb_gnt = 0 ->
        if waiting and not b_in_mem;
            then if (pre arb_gnt) = 3
                then 1
                else if (pre arb_gnt) = 1
                    then 2
                    else 3
            else if b_in_mem
            	then 4
            	else 0;
tel


(* ********** V. Cache L1 ********** *)

(* sens 0 = read, sens 1 = write *)
node CACHE_L1(new_req, ad, val, sens, cache_maj, ad_maj, val_maj: bool) returns(ret : bool^3);
var cache_ad, cache_val : bool;
let
	(ad, val_to_mem,got_it) = if sens = 0 and ad = cache_ad then [cache_val,0,1] 
		else if sens = 0 then [ad,0,0]
		else [ad,val,0];
	
	cache_ad = if sens = 1 then ad else pre cache_ad;
	cache_val =if sens = 1 then val else pre cache_val;
tel


(* ********** VI. SYSTEM ********** *)

node SYSTEM(proc1, proc2, proc3: bool^4;)
	returns(b1, b2, b3 : bool);
var L1_1, L1_2, L1_3, mem : bool^3; elected1, elected2,elected3 : bool;
let
	have_requestmem = if pre elected1 then 1 else 0;
	have_request1 = if proc1[0] or (pre have_request1 and not pre elected1) then 1 else 0;

	new_req1 = if have_request1 and not pre have_request1 then [1,proc1[1], proc1[2], proc1[3]] else [0,0,0,0];

    L1_1 = CACHE_L1(new_req1[0],new_req1[1],new_req1[2],new_req1[3], pre read1[0], pre read1[1], pre read1[2]);
    
	bus_req1 = if have_request1 and L1_1[2] = 0 then 1 else 0;
	arb_gnt = arbitre(bus_req1,0,0,have_requestmem);
	
	elected1 = if arb_gnt = [0,0] then 1 else 0;
	
	mem = if arb_gnt = [1,1] then mem(pre b_out) else;
	b_out = bus(L1_1,0,0,mem);
	
	b1 = if L1_1[2] = 1 then L1_1[0] else if arb_gnt = [1,1] then b_out;

    read1 = if arb_gnt = [1,1] and b_out[2] = 0 then [1,b_out[0],b_out[1]] else [0,0,0];

tel


