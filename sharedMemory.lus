(*
BLOTTIERE--MAYO Robin 3200248
REYNIER Florian 3506673
*)


(* ********** I. PROCESSOR ********** *)

(* Ask for the word in address ad : *)
(*
node CPU_RD(ad : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, nil);
tel
*)

(* Ask to write val in address ad : *)
(*
node CPU_WR(ad, val : bool) returns (b1, b2);
let
    (b1, b2) = CACHE_L1(ad, val)
tel
*)

(* ********** II. MEMORY ********** *)

node MEM(have_req : bool; req : bool^3) returns(ret: bool^3);
	var memory : bool^2;
	let
		memory[0] = if have_req and req[0] = 0 and req[2] = 1 then req[1] else pre memory[0];
		memory[1] = if have_req and req[0] = 1 and req[2] = 1 then req[1] else pre memory[1];
		
		ret[0]=req[0];
		ret[1]=if req[0] = 0 then memory[0] else memory[1];
		ret[2] = req[2];
		
	tel;


(* ********** III. BUS ********** *)

(* bool^3 = [AD, DT, CTRL] *)
node BUS(b_in_L1_1, b_in_L1_2, b_in_L1_3, b_in_mem : bool^3; arb_gnt : bool^2)
    returns(b_out : bool^3);
let
    b_out =
    	if arb_gnt[0] = 0 and arb_gnt[1] = 0
    		then b_in_L1_1
    		else if arb_gnt[0] = 0 and arb_gnt[1] = 1
    			then b_in_L1_2
    			else if arb_gnt[0] = 1 and arb_gnt[1] = 0
    				then b_in_L1_3
    				else b_in_mem; 
tel


(* ********** IV. BUS REFEREE ********** *)

(* If several cache want to access memory, the referee choose the one who has
priority. *)
node REFEREE(L1_1, L1_2, L1_3, b_in_mem : bool)
    returns(arb_gnt : bool^2);
var last_cache, last_cache2 : bool^2;
let
	(* <1> etat initial arbitraire, 1 a priorité sur 2 et 2 sur 3*)
	(* <2> si on a aucun signal, renvoie 00 valeur qui ne sera pas utilisée, si la memoire veut le bus, on lui donne en 
	priorité absolue*)
	(*<3 a 8> Les 6 possibilites d'etats classiques d'etats elus precedement le troisieme a priorité sur l'avant dernier elu
	qui à priorité sur le dernier elu*)
	(*<9 a 12> cas particuliers des premiere et deuxieme election de cache, l'etat initial ou le dernier et l'avant dernier
		sont nuls([1,1]) et les trois possibilités de deuxieme election ou l'avant dernier est nul et le dernier est l'un des 
		3 caches*)
    arb_gnt = (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0])->(*1*)
    if not L1_1 and not L1_2 and not L1_3 and not b_in_mem then [0,0] else if b_in_mem then [1,1](*2*) 
else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 1 and pre last_cache2[1] = 0 then(*3*) 
(if L1_2 then [0,1] else if L1_3 then [1,0] else [0,0]) 
else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 1 then(*4*)
(if L1_3 then [1,0] else if L1_2 then [0,1] else [0,0])
else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 0 and pre last_cache2[1] = 0 then(*5*)
(if L1_3 then [1,0] else if L1_1 then [0,0] else [0,1])
else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 0 then(*6*)
(if L1_1 then [0,0] else if L1_3 then [1,0] else [0,1])
else if pre last_cache[0] = 1 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 0 then(*7*)
(if L1_2 then [0,1] else if L1_1 then [0,0] else [1,0])
else if pre last_cache[0] = 1 and pre last_cache[1] = 0 and pre last_cache2[0] = 0 and pre last_cache2[1] = 1 then(*8*)
(if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0])
else if pre last_cache[0] = 1 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 then(*9*)
(if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0])
else if pre last_cache[0] = 0 and pre last_cache[1] = 0 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 then(*10*)
(if L1_2 then [0,1] else if L1_3 then [1,0] else [0,0])
else if pre last_cache[0] = 0 and pre last_cache[1] = 1 and pre last_cache2[0] = 1 and pre last_cache2[1] = 1 then(*11*)
(if L1_1 then [0,0] else if L1_3 then [1,0] else [0,1])
else (if L1_1 then [0,0] else if L1_2 then [0,1] else [1,0]);(*12*)

(*last_cache2 avant dernier cache elu, si aucun cache ou seulement 1 a été élu vaut [1,1]*)
last_cache2 = if L1_1 or L1_2 or L1_3 then [1,1]->pre last_cache else [1,1]->pre last_cache2;
(*last_cache1 dernier cache elu, si aucun cache n'a été élu vaut [1,1]*)
last_cache = if L1_1 or L1_2 or L1_3 then arb_gnt else [1,1]->pre last_cache;

(*note: ne pas confondre la valeur [1,1] des derniers caches qui correspond à aucun cache, et la valeur [1,1] de arb_gnt
qui corresponds a l'election de la memoire les trois autres possibilites du couple de booleens designe dans les deux cas
les 3 caches *)

tel


(* ********** V. Cache L1 ********** *)

(* sens 0 = read, sens 1 = write *)
node CACHE_L1(new_req, ad, val, sens, cache_maj, ad_maj, val_maj: bool) returns(ret : bool^4);
var cache_ad, cache_val : bool;
let

	cache_ad = if sens = 1 and new_req then ad else if cache_maj then ad_maj else pre cache_ad;
	cache_val = if sens = 1 and new_req then val else if cache_maj then val_maj else pre cache_val;

	ret = if new_req and sens = 0 and ad = cache_ad then [ad,cache_val,sens,1] 
		else if  new_req then [ad,val,sens,0]
		else [0,0,0,0];
tel


(* ********** VI. SYSTEM ********** *)

node SYSTEM(proc1, proc2, proc3: bool^4;)
	returns(b1, b2, b3 : bool);
var L1_1, L1_2, L1_3,new_req1 : bool^4; mem , b_out,read1: bool^3; elected1, elected2,elected3, have_requestmem,have_request1,bus_req1,arbitrage : bool; arb_gnt : bool^2;
let
	have_requestmem = if 0->pre elected1 then 1 else 0;
	have_request1 = if proc1[0] or (0->pre have_request1 and not pre elected1) then 1 else 0;

	new_req1 = if have_request1 and not 0->pre have_request1 then [1,proc1[1], proc1[2], proc1[3]] else [0,0,0,0];

    L1_1 = CACHE_L1(new_req1[0],new_req1[1],new_req1[2],new_req1[3], 0->pre read1[0], 0->pre read1[1], 0->pre read1[2]);
    L1_2 = [0,0,0,0];
    L1_3 = [0,0,0,0];
    
	bus_req1 = if have_request1 and L1_1[3] = 0 then 1 else 0;
	arb_gnt = REFEREE(bus_req1,0,0,have_requestmem);

	arbitrage = if bus_req1 or have_requestmem then 1 else 0;
	
	elected1 = if arbitrage and arb_gnt[0] = 0 and arb_gnt[1] = 0 then 1 else 0;
	elected2 = 0;
	elected3 = 0;
	
	mem = MEM(if arb_gnt[0] = 1 and arb_gnt[1] = 1 then 1 else 0,[0,0,0]->pre b_out);
	b_out = BUS(L1_1[0..2],[0,0,0],[0,0,0],mem, arb_gnt);
	
	b1 = if L1_1[3] = 1 then L1_1[1] else if arb_gnt[0] = 1 and arb_gnt[1] = 1 then b_out[1] else 0;
	b2 = 0;
	b3 = 0;

    read1 = [0,0,0]->if arb_gnt[0] = 1 and arb_gnt[1] = 1 and b_out[2] = 0 then [1,b_out[0],b_out[1]] else [0,0,0];

tel


